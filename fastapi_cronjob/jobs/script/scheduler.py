from ..scheduler import JobScheduler
from .jobs import ScriptJob
from apscheduler.triggers.cron import CronTrigger
import logging

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s"
)
logger = logging.getLogger(__name__)

class ScriptScheduler:
    """Scheduler qu·∫£n l√Ω c√°c job th·ª±c thi script"""
    def __init__(self):
        self.scheduler = JobScheduler()
        self.scripts = {}

    def add_script(self, script_path: str, schedule: str = "0 0 * * *",run_immediately: bool = False):
        """Th√™m m·ªôt script v√†o scheduler
        Args:
            script_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file script
            schedule: L·ªãch ch·∫°y theo ƒë·ªãnh d·∫°ng cron (m·∫∑c ƒë·ªãnh: ch·∫°y l√∫c 00:00 m·ªói ng√†y)
        """
        if script_path in self.scripts:
            logger.warning(f"Script {script_path} ƒë√£ t·ªìn t·∫°i")
            return
        
        # T·∫°o job th·ª±c thi script
        script_job = ScriptJob(script_path)
        if run_immediately:
            script_job.execute()  # üî• Ch·∫°y ngay
        # Th√™m job v√†o scheduler
        self.scheduler.add_job(
            script_job,
            trigger=CronTrigger.from_crontab(schedule)
        )

        self.scripts[script_path] = script_job
        logger.info(f"Current scripts: {self.scripts.keys()}")

    def remove_script(self, script_path: str):
        """X√≥a m·ªôt script kh·ªèi scheduler"""
        if script_path not in self.scripts:
            logger.warning(f"Script {script_path} kh√¥ng t·ªìn t·∫°i")
            return

        self.scheduler.remove_job(self.scripts[script_path].job_id)
        del self.scripts[script_path]
        logger.info(f"ƒê√£ x√≥a script {script_path} kh·ªèi scheduler")

    def update_schedule(self, script_path: str, schedule: str):
        """C·∫≠p nh·∫≠t l·ªãch ch·∫°y c·ªßa m·ªôt script"""
        if script_path not in self.scripts:
            logger.warning(f"Script {script_path} kh√¥ng t·ªìn t·∫°i")
            return

        self.scheduler.remove_job(self.scripts[script_path].job_id)
        self.scheduler.add_job(
            self.scripts[script_path],
            trigger=CronTrigger.from_crontab(schedule)
        )
        logger.info(f"ƒê√£ c·∫≠p nh·∫≠t l·ªãch ch·∫°y cho script {script_path}")

    def start(self):
        """Kh·ªüi ƒë·ªông scheduler"""
        self.scheduler.start()

    def shutdown(self):
        """D·ª´ng scheduler"""
        self.scheduler.shutdown()

    def get_all_scripts(self):
        """L·∫•y danh s√°ch t·∫•t c·∫£ c√°c script ƒëang ƒë∆∞·ª£c l√™n l·ªãch"""
        return list(self.scripts.keys()) 
    def get_script_info(self, script_path: str):
        """L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt script"""
        # Ki·ªÉm tra xem script c√≥ t·ªìn t·∫°i kh√¥ng
        if script_path not in self.scripts:
            raise ValueError(f"Script {script_path} kh√¥ng t·ªìn t·∫°i trong scheduler.")

        script_job = self.scripts.get(script_path)

        # L·∫•y th√¥ng tin v·ªÅ job
        job_info = script_job
        
        return job_info